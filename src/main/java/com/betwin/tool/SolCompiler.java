package com.betwin.tool;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;

import org.apache.commons.codec.Charsets;
import org.apache.commons.io.IOUtils;
import org.ethereum.solidity.compiler.CompilationResult;
import org.ethereum.solidity.compiler.SolidityCompiler;


public class SolCompiler {

    public static void main(String[] args) throws IOException, InterruptedException {
        SolCompiler compile = new SolCompiler();
        compile.start();
    }

    private void start() throws IOException, InterruptedException {
        File dir = new File(getClass().getResource("/contracts").getFile());
        if (!dir.isDirectory()) {
            System.out.println("directory is not exsiting........");
            return;
        }

        for (File file : dir.listFiles()) {
            compile(file);
        }
    }

    private void compile(File file) throws IOException, InterruptedException {
        if (file.getName().indexOf(".sol") <= 0) {
            return;
        }
        String solName = file.getName();
        String binName = solName.substring(0, solName.indexOf(".sol")) + ".bin";
        String abiName = solName.substring(0, solName.indexOf(".sol")) + ".abi";
        String binPath = getClass().getResource("/contracts").getPath() + "/" + binName;
        String abiPath = getClass().getResource("/contracts").getPath() + "/" + abiName;
        System.out.println(abiPath);
        String src = IOUtils.toString(new FileInputStream(file), Charsets.UTF_8);
        SolidityCompiler.Result result = SolidityCompiler.getInstance().compileSrc(src.getBytes(Charsets.UTF_8), true,
                true, SolidityCompiler.Options.ABI, SolidityCompiler.Options.BIN, SolidityCompiler.Options.METADATA);
        if (result.isFailed()) {
            System.out.println("Contract compilation failed:\n" + result.errors);
        }
        CompilationResult res = CompilationResult.parse(result.output);
        if (res.getContractName().isEmpty()) {
            System.out.println("Compilation failed, no contracts returned:\n" + result.errors);
        }

        String bin = res.getContracts().get(0).bin;
        String abi = res.getContracts().get(0).abi;

        IOUtils.write(bin, new FileOutputStream(binPath), Charsets.UTF_8);
        IOUtils.write(abi, new FileOutputStream(abiPath), Charsets.UTF_8);

        String os = System.getProperty("os.name").toLowerCase();
        System.out.println(os);
        String web3jPath = getClass().getResource("/web3j-3.3.1/bin/web3j").getPath();
        if (os.startsWith("windows")) {
            web3jPath = getClass().getResource("/web3j-3.3.1/bin/web3j.bat").getPath();
        }
        String command = web3jPath + " solidity generate --javaTypes " + binPath + " " + abiPath + " -p autogenerated -o ./";
        System.out.println(command);
        Process process = Runtime.getRuntime().exec(command);
        if (process == null) {
            System.out.println("process is null...........");
        }
        BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));
        System.out.println(br.readLine());
        Thread.sleep(2000);
    }
}
